#!/usr/bin/env node

// Generated by CoffeeScript 1.12.4
var N, NS_PER_SEC, OUTPUT_DIR, REPETITIONS, TESTS, cmm1, cmm2, cmmMeasure, content, ext, extNames, extension, file, fs, i, j, k, l, language, languages, len, len1, len2, len3, len4, m, measureTime, memory, n, o, path, range, ref, ref1, ref2, resultTest, results, runcmm1, spawnSync, test, time, timeAvg, times, useTimer, value, values;

fs = require('fs');

path = require('path');

spawnSync = require('child_process').spawnSync;

cmm1 = require('./cmm1');

cmm2 = require('./cmm2');

memory = new cmm2.Memory;

OUTPUT_DIR = './out';

NS_PER_SEC = 1e9;

REPETITIONS = 3;

if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR);
}

range = function(b, e, i) {
  var j, ref, ref1, ref2, results1, x;
  results1 = [];
  for (x = j = ref = b, ref1 = e, ref2 = i; ref2 > 0 ? j <= ref1 : j >= ref1; x = j += ref2) {
    results1.push(x);
  }
  return results1;
};

TESTS = {
  is_prime: range(1, 10, 1),
  fibonacci: range(25, 50, 5),
  collatz: range(10000, 50000, 5000)
};

useTimer = function(file, value) {
  var command, elapsed, output;
  command = "timer";
  output = spawnSync(command, ['-ni', file, value], {
    encoding: 'utf-8'
  }).stderr;
  elapsed = JSON.parse(output).elapsed;
  return elapsed / 1000;
};

cmmMeasure = function(file, value, compileFn, compileTransform, runFn) {
  var compilation, diff, start;
  compilation = compileTransform(compileFn(fs.readFileSync(file, 'utf-8')));
  start = process.hrtime();
  runFn(compilation, value.toString());
  diff = process.hrtime(start);
  return (diff[0] * NS_PER_SEC + diff[1]) / 1000000;
};

runcmm1 = function(ast, input) {
  var done, iterator, ref, results1;
  iterator = cmm11.execute(ast, input);
  done = false;
  results1 = [];
  while (!done) {
    results1.push((ref = iterator.next(), done = ref.done, ref));
  }
  return results1;
};

measureTime = {
  cmm2: function(file, value) {
    return cmmMeasure(file, value, cmm2.compile, (function(x) {
      x.program.attachMemory(memory);
      return x.program;
    }), cmm2.runSync);
  },
  cmm1: function(file, value) {
    return cmmMeasure(file, value, cmm1.compile, (function(x) {
      return x;
    }), cmm1.execute);
  },
  cc: function(file, value) {
    return useTimer(file.slice(0, -3), value);
  },
  js: useTimer,
  py: useTimer
};

extNames = Object.keys(measureTime);

results = {};

for (test in TESTS) {
  values = TESTS[test];
  languages = {};
  ref = fs.readdirSync("./" + test);
  for (j = 0, len = ref.length; j < len; j++) {
    file = ref[j];
    if ((extension = path.extname(file).slice(1)).length > 0) {
      languages[extension] = path.join("./" + test, file);
    }
  }
  languages.cmm1 = languages.cmm11 = languages.cmm2 = languages.cmm;
  delete languages.cmm;
  results[test] = {};
  for (k = 0, len1 = extNames.length; k < len1; k++) {
    language = extNames[k];
    file = languages[language];
    results[test][language] = [];
    for (l = 0, len2 = values.length; l < len2; l++) {
      value = values[l];
      if (test === 'fibonacci' && ((language.indexOf('cmm') >= 0 && value > 35) || (language === 'py' && value > 40))) {
        continue;
      } else {
        timeAvg = 0;
        for (times = m = 0, ref1 = REPETITIONS; 0 <= ref1 ? m < ref1 : m > ref1; times = 0 <= ref1 ? ++m : --m) {
          time = measureTime[language](file, value);
          timeAvg += time;
        }
        timeAvg /= REPETITIONS;
        console.log({
          language: language,
          file: file,
          value: value,
          time: timeAvg / 1000
        });
        results[test][language].push(timeAvg);
      }
    }
  }
}

for (test in results) {
  resultTest = results[test];
  file = path.join(OUTPUT_DIR, test + ".csv");
  content = "N," + (extNames.join(','));
  ref2 = TESTS[test];
  for (i = n = 0, len3 = ref2.length; n < len3; i = ++n) {
    N = ref2[i];
    content += "\n" + N;
    for (o = 0, len4 = extNames.length; o < len4; o++) {
      ext = extNames[o];
      content += "," + (resultTest[ext][i] != null ? Math.round(resultTest[ext][i]) : "");
    }
  }
  fs.writeFileSync(file, content);
}
